// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace LiStreamEF.Models
{
    public partial class LiStreamContext : DbContext
    {
        public LiStreamContext()
        {
        }

        public LiStreamContext(DbContextOptions<LiStreamContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<PlaylistItem> PlaylistItems { get; set; }
        public virtual DbSet<Song> Songs { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Album>(entity =>
            {
                entity.Property(e => e.AlbumId)
                    .ValueGeneratedNever()
                    .HasColumnName("AlbumID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.HasOne(d => d.ArtistNavigation)
                    .WithMany(p => p.Albums)
                    .HasForeignKey(d => d.Artist)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Albums__Artist__3D5E1FD2");
            });

            modelBuilder.Entity<Artist>(entity =>
            {
                entity.Property(e => e.ArtistId)
                    .ValueGeneratedNever()
                    .HasColumnName("ArtistID");

                entity.Property(e => e.Bio).IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Genre>(entity =>
            {
                entity.ToTable("Genre");

                entity.Property(e => e.GenreId)
                    .ValueGeneratedNever()
                    .HasColumnName("GenreID");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasMany(d => d.Songs)
                    .WithMany(p => p.Genres)
                    .UsingEntity<Dictionary<string, object>>(
                        "SongGenre",
                        l => l.HasOne<Song>().WithMany().HasForeignKey("SongId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__SongGenre__SongI__4316F928"),
                        r => r.HasOne<Genre>().WithMany().HasForeignKey("GenreId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__SongGenre__Genre__440B1D61"),
                        j =>
                        {
                            j.HasKey("GenreId", "SongId");

                            j.ToTable("SongGenres");

                            j.IndexerProperty<Guid>("GenreId").HasColumnName("GenreID");

                            j.IndexerProperty<Guid>("SongId").HasColumnName("SongID");
                        });
            });

            modelBuilder.Entity<Playlist>(entity =>
            {
                entity.Property(e => e.PlaylistId)
                    .ValueGeneratedNever()
                    .HasColumnName("PlaylistID");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.OwnerNavigation)
                    .WithMany(p => p.Playlists)
                    .HasForeignKey(d => d.Owner)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Playlists__Owner__38996AB5");
            });

            modelBuilder.Entity<PlaylistItem>(entity =>
            {
                entity.HasKey(e => new { e.SongId, e.PlaylistId });

                entity.Property(e => e.SongId).HasColumnName("SongID");

                entity.Property(e => e.PlaylistId).HasColumnName("PlaylistID");

                entity.Property(e => e.AddDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.PlaylistItems)
                    .HasForeignKey(d => d.AddedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PlaylistI__Added__398D8EEE");

                entity.HasOne(d => d.Playlist)
                    .WithMany(p => p.PlaylistItems)
                    .HasForeignKey(d => d.PlaylistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PlaylistI__Playl__300424B4");

                entity.HasOne(d => d.Song)
                    .WithMany(p => p.PlaylistItems)
                    .HasForeignKey(d => d.SongId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PlaylistI__SongI__30F848ED");
            });

            modelBuilder.Entity<Song>(entity =>
            {
                entity.Property(e => e.SongId)
                    .ValueGeneratedNever()
                    .HasColumnName("SongID");

                entity.Property(e => e.AlbumId).HasColumnName("AlbumID");

                entity.Property(e => e.ArtistId).HasColumnName("ArtistID");

                entity.Property(e => e.Data).IsRequired();

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Songs)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK__Songs__AlbumID__2A4B4B5E");

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.SongsNavigation)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Songs__ArtistID__3F466844");

                entity.HasMany(d => d.Artists)
                    .WithMany(p => p.Songs)
                    .UsingEntity<Dictionary<string, object>>(
                        "Feature",
                        l => l.HasOne<Artist>().WithMany().HasForeignKey("ArtistId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Features__Artist__47DBAE45"),
                        r => r.HasOne<Song>().WithMany().HasForeignKey("SongId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Features__SongID__46E78A0C"),
                        j =>
                        {
                            j.HasKey("SongId", "ArtistId");

                            j.ToTable("Features");

                            j.IndexerProperty<Guid>("SongId").HasColumnName("SongID");

                            j.IndexerProperty<Guid>("ArtistId").HasColumnName("ArtistID");
                        });
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("UserID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}